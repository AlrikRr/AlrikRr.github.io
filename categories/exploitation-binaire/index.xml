<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploitation-Binaire on AlrikRr-Blog</title>
    <link>/categories/exploitation-binaire/</link>
    <description>Recent content in Exploitation-Binaire on AlrikRr-Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/exploitation-binaire/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>üá´üá∑  Ret2libc avec protection NX</title>
      <link>/blog-fr/binary/6-ret2libc/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog-fr/binary/6-ret2libc/</guid>
      <description>ret2libc, qu&amp;rsquo;est ce que C ? Il s&amp;rsquo;agit d&amp;rsquo;une faille que nous allons exploiter sur un binaire qui a la protection NX (non executable) d&amp;rsquo;activ√©e.
Il existe plusieurs fa√ßons de contourner cette protection (ROP, ret2plt, etc&amp;hellip;) mais, ici nous allons nous concentrer sur ret2libc.
Dans notre programme, la stack n&amp;rsquo;est pas ex√©cutable donc, mais la libc contient beaucoup de fontions int√©ressantes et elle est ex√©cutable.
L&amp;rsquo;id√©e est d&amp;rsquo;aller chercher les fonctions qui nous int√©ressent afin de nous forger un exploit.</description>
    </item>
    
    <item>
      <title>üá´üá∑  ROP32 sans protection</title>
      <link>/blog-fr/binary/5-ret2win/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog-fr/binary/5-ret2win/</guid>
      <description>Qu&amp;rsquo;est ce qu&amp;rsquo;un ROP 32 ? Un ROP 32 fonctionne de la m√™me mani√®re qu&amp;rsquo;un buffer overflow √† la diff√©rence qu&amp;rsquo;il n&amp;rsquo;y aura pas de shellcode ici !
Le but d&amp;rsquo;un ROP 32est d&amp;rsquo;appeler une fonction du programme qui n&amp;rsquo;est jamais appeler une seule fois dans le code du programme.
Dans ce tutoriel je vais vous montrer comment ex√©cuter un exploit ROP sur un binaire 32bits.
ROP 32 Code Voici le code du programme que nous alons exploiter :</description>
    </item>
    
    <item>
      <title>üá´üá∑  BufferOverflow 32bits sans protection</title>
      <link>/blog-fr/binary/4-bufferoverflow/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog-fr/binary/4-bufferoverflow/</guid>
      <description>Qu&amp;rsquo;est ce qu&amp;rsquo;un BufferOverflow ? Un BufferOverflow consiste √† √©craser la pile EIP d&amp;rsquo;un programme √† un moment donn√© afin de compromettre une application.
L&#39;√©crasement de la pile peut se faire par diff√©rents moyens, mais le principal probl√®me vient d&amp;rsquo;une mauvaise gestion d&amp;rsquo;un buffer pendant la saisie par un utilisateur.
Pourquoi ?  Faire crash une application (un DOS) Avoir un shell avec des droits pr√©vil√©gi√©s Voler des informations ( Leak Memory ) Avoir un reverse shell ou un bind shell √† distance  Pr√©-Requis Avant de commencer l&amp;rsquo;exploitation de notre binaire, il faut d√©sactiver la protection ASLR activ√©e par d√©faut sous linux.</description>
    </item>
    
  </channel>
</rss>